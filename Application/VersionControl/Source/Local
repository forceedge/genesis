#!/usr/bin/env bash

function genesisEdit() {
	$genesis_editor $genesis_dir;
}

function getCurrentBranch() {
	echo $(git rev-parse --abbrev-ref HEAD);
}

function genesisSave() {

	# Check if bash editing has caused an error or not?
	genesisBashReload;
	genesisBranch;

	currentDir=$(pwd);
	cd $genesis_dir;

	if [[ -z $1 ]]; then
		print "Enter branch to save (leave empty to select current branch):";
		read branch;
	else
		branch=$1;
	fi

	if [[ -z $branch ]]; then
		branch=$(getCurrentBranch);
	fi

	git checkout $branch;

	if [[ ! -z $genesis_phpunitBin && ! -z $genesis_phpunitConfigPath ]]; then

		print "Running PHPUnit, config search in: '$genesis_phpunitConfigPath'";
		# Run unit tests on app
		$genesis_phpunitBin -c $genesis_phpunitConfigPath;

		print "Are you sure you want to save data after considering the output above? [Y/N]";
		if [[ $(userChoice) != 'Y' ]]; then
			print "Aborting";
			cd $currentDir;
			return;
		fi
	fi

	if [[ -z $(git diff --name-only --cached) ]]; then
		print "No file changes found, Attempting to push commits/tags";
		git pull;

		print "Showing conflicts on this branch:";
		conflicts=$(genesisConflicts);

		if [[ -z $conflicts ]]; then
			print "No conflicts found";
		else
			printf "$conflicts";
		fi

		genesisPush;
		genesisPushTag;

		return;
	fi

	git add --all;
	print "Files edited:";
	git diff --name-only --cached

	cd $currentDir;

	print "Please enter a commit message:";
	read message;

	cd $genesis_dir;
	genesisTags;
	genesisVersion;
	cd $currentDir;

	print "Please enter a version number for this push or [major|minor|patch]: (leave empty to skip tagging)";
	read version;

	print "Attempting to commit with message '$message' and tag '$version', continue? [Y/N]";
	if [[ $(userChoice) != 'Y' ]]; then
		return;
	fi

	print "Saving changes with message: '$message'";
	cd $genesis_dir;

	if [[ ! -z $version ]]; then
		inAppVersion=${version#"v"};
	else
		inAppVersion='';
	fi

	print "Updating App Version";
	$genesis_vu $inAppVersion;

	genesisPush "$message";

	if [[ ! -z $version ]]; then
		git tag $version;
		genesisPushTag $version;
	fi

	version=$($genesis_vu --version);
	print "Version updated to: $version";

	cd $currentDir;
}

function genesisConflicts() {
	currentDir=$(pwd);
	cd $genesis_dir;
	git diff --name-only --diff-filter=U;
	cd $currentDir;
}

function genesisMerge() {
	currentDir=$(pwd);
	genesisBranch;
	cd $genesis_dir;
	print "Enter branch name to merge changes from:";
	read mergeBranch;

	print "Enter branch name to merge into (leave blank to select current branch):"
	read branch;

	if [[ -z $branch ]]; then
		branch=$(getCurrentBranch);
	fi

	print "About to merge '$mergeBranch' into '$branch', continue? [y/n]";
	if [[ $(userChoice) != 'Y' ]]; then
		return;
	fi

	print "Pulling in latest changes";
	git pull;
	print "Updating '$mergeBranch' branch with changes in 'master' branch";
	git checkout $mergeBranch;
	git merge master;
	print "Merging '$mergeBranch' branch into '$branch' branch";
	git checkout $branch;
	git merge $mergeBranch;

	print "Merge successfull";

	if [[ $branch == 'master' ]]; then
		print "Do you want to push / tag this version [y/n]";
		if [[ $(userChoice) == 'Y' ]]; then
			genesisSave $branch;
		fi
	fi

	cd $currentDir;
}

function genesisPush() {
	cd $genesis_dir;
	print "Looking for updates: ";
	git pull;
	print "Committing all changes: ";
	git add --all;
	git commit -m "$1";
	print "Pushing commit(s): ";
	git push;
}

function genesisPushTag() {
	cd $genesis_dir;
	print "Pushing tag(s): ";
	git push --tag;
}

function genesisUpdate() {
	print "Updating genesis on local machine";
	currentDir=$(pwd);
	cd $genesis_dir;
	git pull;
	genesisBashReload;
	cd $currentDir;
}

function genesisStatus() {
	print "Showing git status on Genesis";
	currentDir=$(pwd);
	cd $genesis_dir;
	git status;
	cd $currentDir;
}

function genesisTags() {
	print "Existing Tags:";
	currentDir=$(pwd);
	cd $genesis_dir;
	git tag;
	cd $currentDir;
}

function genesisVersion() {
	print "Current App version:";
	$genesis_vu --version;
	currentDir=$(pwd);
	cd $genesis_dir;
	print "Latest Tag Version:";
	version=$(git describe --tag);
	echo $version;

	if [[ $1 == '--more' ]]; then
		print "Info";
		git show $version;
	fi

	cd $currentDir;
}

function genesisPoint() {

	if [[ -z $1 ]]; then
		genesisBranch;
		print "Enter branch to point to:";
		read branch;
	else
		branch=$1;
	fi

	print "Pointing local env to branch/tag '$branch':";
	currentDir=$(pwd);
	cd $genesis_dir;
	git checkout $branch;
	cd $currentDir;
}

function genesisExecute() {
	print "Enter command to run:";
	read genesisCommand;

	if [[ -z $genesisCommand ]]; then
		return;
	fi

	currentDir=$(pwd);
	cd $genesis_dir;
	$genesisCommand;
	cd $currentDir;
}

function genesisBranch() {
	print "Showing branches:";
	currentDir=$(pwd);
	cd $genesis_dir;
	git branch;
	cd $currentDir;
}

function genesisBranchCreate() {
	currentDir=$(pwd);

	if [[ -z $1 ]]; then
		genesisBranch;
		print "Enter branch name to create";
		read branch;
	else
		branch=$1;
	fi

	git branch $branch;
	print "Branch created successfully.";
	
	print "Set upstream? [y/n]";

	if [[ $(userChoice) == 'Y' ]]; then
		print "Updating app from repo";
		git fetch origin;
		git branch -u origin/$branch;
	fi

	print "Do you want to switch to '$branch'? [y/n]";
	if [[ $(userChoice) == 'Y' ]]; then
		git checkout $branch;
	fi

	cd $currentDir;
}

function genesisBranchDelete() {

	if [[ -z $genesis_defaultBranch ]]; then
		print "To use this feature, set genesis_defaultBranch variable in config";
		return;
	fi

	currentDir=$(pwd);

	if [[ -z $1 ]]; then
		genesisBranch;

		print "Enter branch name to delete (empty to delete current branch)";
		read branch;
	else
		branch=$1;
	fi

	if [[ -z $branch ]]; then
		branch=$(getCurrentBranch);
	fi

	print "Delete remote branch '$branch'? [y/n]";
	if [[ $(userChoice) == 'Y' ]]; then
		git push origin :$branch;
	fi

	git checkout $genesis_defaultBranch;
	git branch -D $branch;

	cd $currentDir;
}

function genesisLog() {
	print "Showing log entries:";
	currentDir=$(pwd);
	cd $genesis_dir;

	if [[ -z $1 ]]; then
		git log -n 3;
	else
		git log -n $1;
	fi

	cd $currentDir;
}

function genesisErrorLog() {
	if [[ ! -f $genesis_phpErrorLog ]]; then
		print "Unable to find error log '$genesis_phpErrorLog', please run 'genesis bash config' to reconfigure";
		return;
	fi

	tail -f $genesis_phpErrorLog;
}

function genesisConfig() {
	$genesis_editor "$genesis_dir"/Application/Core/Config;
}

function genesisOpen() {
	open $1;
}

function genesisConsole() {
	$genesis_dir/Application/simplify;
}

function genesisClone() {
	print "Directory Listing";
	ls -la;
	print "Current Directory";
	pwd;
	print "Where do you want to clone? (use '.' to clone in current folder)";
	read path;
	print "Attempting to clone '$genesis_repo' to '$path' [y/n]:";

	if [[ $(userChoice) != 'Y' ]]; then
		print "Aborting";
		return;
	fi

	print "Cloning now...";
	sudo git clone $genesis_repo $path;

	if [[ ! -d $path ]]; then
		print "Unable to clone to $path, please check permissions to repo.";
		return;
	fi

	print "Cloning complete";

	if [[ ! -z $genesis_defaultBranch ]]; then
		currentDir=$(pwd);
		print "Switching to '$path'";
		cd $path;
		print "Checking out default branch";
		git checkout genesis_defaultBranch;
		print "Showing all branches";
		git status;
		cd $currentDir;
	fi
}