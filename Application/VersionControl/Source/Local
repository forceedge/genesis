#!/usr/bin/env bash

function genesisEdit() {
	$genesis_editor $genesis_dir;
}

function genesisSave() {

	currentDir=$(pwd);
	cd $genesis_dir;

	if [[ ! -z $genesis_phpunitBin && ! -z $genesis_phpunitConfigPath ]]; then

		print "Running PHPUnit, config search in: '$genesis_phpunitConfigPath'";
		# Run unit tests on app
		$genesis_phpunitBin -c $genesis_phpunitConfigPath;

		print "Are you sure you want to save data after considering the output above? [Y/N]";
		if [[ $(userChoice) != 'Y' ]]; then
			print "Aborting";
			cd $currentDir;
			return;
		fi
	fi

	if [[ -z $(git diff --name-only) ]]; then
		print "No file changes found, Attempting to push commits/tags";
		genesisPush;
		genesisPushTag;

		return;
	fi

	print "Files edited:";
	git diff --name-only

	cd $currentDir;

	print "Please enter a commit message:";
	read message;

	cd $genesis_dir;

	genesisTags;
	genesisVersion;

	cd $currentDir;

	print "Please enter a version number for this push: (leave empty to skip tagging)";
	read version;

	print "Attempting to commit with message '$message' and tag '$version', continue? [Y/N]";
	if [[ $(userChoice) != 'Y' ]]; then
		return;
	fi

	print "Saving changes with message: '$message'";

	cd $genesis_dir;

	genesisPush $message;

	if [[ ! -z $version ]]; then
		git tag $version;
		genesisPushTag $version;
	fi

	cd $currentDir;
}

function genesisPush() {
	cd $genesis_dir;
	print "Looking for updates: ";
	git pull;
	print "Committing all changes: ";
	git add --all;
	git commit -m "$1";
	print "Pushing commit(s): ";
	git push;
}

function genesisPushTag() {
	cd $genesis_dir;
	print "Pushing tag(s): ";
	git push --tag;
}

function genesisUpdate() {
	print "Updating genesis on local machine";
	currentDir=$(pwd);
	cd $genesis_dir;
	git pull;
	genesisBashReload;
	cd $currentDir;
}

function genesisStatus() {
	print "Showing git status on Genesis";
	currentDir=$(pwd);
	cd $genesis_dir;
	git status;
	cd $currentDir;
}

function genesisTags() {
	print "Existing Tags:";
	currentDir=$(pwd);
	cd $genesis_dir;
	git tag;
	cd $currentDir;
}

function genesisVersion() {
	print "Current version:";
	currentDir=$(pwd);
	cd $genesis_dir;
	version=$(git describe --tag);
	echo $version;

	if [[ $1 == '--more' ]]; then
		print "Info";
		git show $version;
	fi

	cd $currentDir;
}

function genesisPoint() {

	if [[ -z $1 ]]; then
		branch=$genesis_defaultBranch;
	else
		branch=$1;
	fi

	print "Pointing local env to branch/tag '$branch':";
	currentDir=$(pwd);
	cd $genesis_dir;
	git checkout $branch;
	cd $currentDir;
}

function genesisExecute() {
	print "Enter command to run:";
	read genesisCommand;

	if [[ -z $genesisCommand ]]; then
		return;
	fi

	currentDir=$(pwd);
	cd $genesis_dir;
	$genesisCommand;
	cd $currentDir;
}

function genesisBranch() {
	print "Showing branches:";
	currentDir=$(pwd);
	cd $genesis_dir;
	git branch;
	cd $currentDir;
}

function genesisBranchCreate() {

	if [[ $1 == 'origin' ]]; then
		branch=$2;
	else
		branch=$1;
	fi

	print "Creating/Switching branch '$branch':";
	currentDir=$(pwd);
	cd $genesis_dir;
	git branch $branch;
	git checkout $branch;

	if [[ ! -z $2 ]]; then
		print "Creating branch on repo:";
		git push origin $branch;
	else
		print "To create the branch on remote repository, run: 'genesis branch create origin feature-list'";
	fi

	git branch -u origin/$branch;
	cd $currentDir;
}

function genesisBranchDelete() {

	if [[ $1 == 'origin' ]]; then
		branch=$2;
	else
		branch=$1;
	fi

	print "Deleting branch '$branch':";
	currentDir=$(pwd);
	cd $genesis_dir;

	if [[ ! -z $genesis_defaultBranch ]]; then
		print "Switching to default branch '$genesis_defaultBranch'";
		git checkout $genesis_defaultBranch;
	fi

	git branch -D $branch;

	if [[ ! -z $2 ]]; then
		print "Deleting branch from repo:";
		git push origin :$branch;
	else
		print "To delete the branch from the remote repository, run: 'genesis branch create origin feature-list'";
	fi

	cd $currentDir;
}

function genesisLog() {
	print "Showing log entries:";
	currentDir=$(pwd);
	cd $genesis_dir;

	if [[ -z $1 ]]; then
		git log -n 3;
	else
		git log -n $1;
	fi

	cd $currentDir;
}

function genesisErrorLog() {
	if [[ ! -f $genesis_phpErrorLog ]]; then
		print "Unable to find error log '$genesis_phpErrorLog', please run 'genesis bash config' to reconfigure";
		return;
	fi

	tail -f $genesis_phpErrorLog;
}

function genesisConfig() {
	$genesis_editor "$genesis_dir"Application/Core/Config;
}

function genesisOpen() {
	open $genesis_dir;
}